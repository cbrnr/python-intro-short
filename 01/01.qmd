---
title: "1 – Basics"
subtitle: "Introduction to Python"
author: "Clemens Brunner"
date: 2025-02-05
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
cap-location: margin
---

## Introduction

In this workshop, you will learn the basics of the Python programming language. This is a course for beginners, so you do not need to be fluent in any other programming language. In fact, it is perfectly fine if you have never programmed before.

We will start from scratch and learn how to set up a working Python environment, including package management and related housekeeping tasks. Once Python is installed on your computer, we will dive into the elegant syntax and basic building blocks of the Python language, such as functions, conditions, and loops. We will then discuss important data types in Python, focussing on strings, lists, and dictionaries. Afterwards, we will start using these building blocks to solve simple tasks such as reading/writing text from/to a file. Finally, we will briefly introduce widely used third-party packages for scientific computing. Specifically, we will touch upon packages that allow us to efficiently work with numerical data and tabular data.

With that out of the way, let's get started!


## Overview

[![xkcd 353 (Python)](https://imgs.xkcd.com/comics/python.png)](https://xkcd.com/353/)

Here are some facts about Python:

- Simple, elegant, and fun to learn and use
- Open source (not only [free as in beer but also free as in speech](https://en.wikipedia.org/wiki/Gratis_versus_libre))
- Cross-platform (Python runs on Windows, macOS, and Linux)
- General-purpose programming language, meaning that Python is not specifically designed to be extremely good in one particular area such as statistics – it can be used for many different applications including data science, web servers, graphical user interfaces, programming the [Raspberry Pi](https://www.raspberrypi.org/), ...
- Batteries included approach (the [standard library](https://docs.python.org/3/library/) shipping with Python contains many useful things ready for use)
- Huge number of [third-party packages](https://pypi.org/) that implement even more useful things
- Large and friendly community

Python was first released by [Guido van Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) way back in 1991, and its popularity has skyrocketed in the past years. While there are many ways to measure the popularity of a programming language, Python has consistently ranked among the top languages for years (for example according to [PYPL](https://pypl.github.io/PYPL.html), the [TIOBE index](https://www.tiobe.com/tiobe-index/), and the [IEEE Spectrum Top Programming Languages](https://spectrum.ieee.org/top-programming-languages-2024)). Also, one of the results of the [Stack Overflow Developer Survey 2024](https://survey.stackoverflow.co/2024/) is that Python is among the [most popular technologies](https://survey.stackoverflow.co/2024/technology/#most-popular-technologies) as well as highly [admired and desired](https://survey.stackoverflow.co/2024/technology/#admired-and-desired).

So far, we have only talked about Python without seeing what the language actually looks like. Here's a sneak peak at what you will be able to understand after completing this course (gray boxes contain Python code, whereas the result of a line of code is shown directly below it):

```{python}
print("Hello World!")
```

```{python}
"only lower case letters".upper()
```

```{python}
for i in range(10):
    print(i, end=", ")
```

```{python}
[k**2 for k in range(0, 100, 10)]
```

In summary, Python is extremely popular and fun to use, so in the next section we're going to discuss how to install it on our computer.


## Installation

The [official Python website](https://www.python.org/) is a great resource for everything related to Python. The [download](https://www.python.org/downloads/) section contains installers for many platforms, including Windows and macOS. If you are on Linux, I recommend that you use your package manager (such as `apt`, `yum`, or `pacman`) to install Python (in most cases, Python will already be installed anyway).

On Windows, make sure to check the option *"Add python.exe to PATH"*. I strongly recommend to use the default values for all other settings.

![Python installer on Windows](install-python-windows.png)

On macOS, run both "Install Certificates" and "Update Shell Profile" commands available in the application folder after the installation is complete:

![Python application folder on macOS](install-python-macos.png)


## First steps

After installing Python, it is instructive to enter some simple Python commands and see what happens. The program which understands and interprets Python commands is called the *Python interpreter*. It can be invoked in various ways, but one of the easiest options is to run it from the command line (or terminal), a powerful text-based interface provided by your operating system.

- On Windows, you should see a start menu entry inside the Python folder named "Python 3.12 (64-bit)" (or similar). Alternatively, you can launch Python from a regular command prompt by starting the "Terminal" app and typing `python` followed by <kbd>Enter</kbd>.
- On macOS, start the "Terminal" app and type `python3` (followed by <kbd>Enter</kbd>).
- On Linux, start your favorite terminal app and type `python` (followed by <kbd>Enter</kbd>).

:::{.callout-important}
The Python interpreter executable is called `python` on Windows and Linux, but `python3` on macOS. If you use macOS, remember to always use `python3` to start the Python interpreter.
:::

A simple (black or white) text window will open – this is the so-called *interactive* Python interpreter. You can enter commands, and Python will happily try to execute what you just typed (the interactive interpreter is also called the [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop), short for read-eval-print loop).

The interactive Python interpreter includes a *prompt*, which is typically the character sequence `>>>`. This prompt indicates that Python is ready to receive user input. You can type a Python command and hit <kbd>Enter</kbd> to evaluate it. Python will immediately show the result of this command (if any) on the next line.

:::{.callout-note}
Throughout the course material, we show Python code in gray boxes and never include the prompt `>>>`. 
:::

Let's try to use Python as a calculator. Python supports the four basic arithmetic operations (addition, subtraction, multiplication, and division):

```{python}
1 + 1
```

```{python}
10 - 7
```

```{python}
7 * 8
```

```{python}
120 / 7
```

In addition, Python can also compute the result of integer division and its remainder:

```{python}
120 // 7
```

```{python}
120 % 7
```

Exponentiation (raising one number to the power of another) uses the `**` operator:

```{python}
2**64
```

Finally, Python knows the correct order of operations and is able to deal with parentheses ([PEMDAS](https://en.wikipedia.org/wiki/Order_of_operations#Mnemonics)):

```{python}
(13 + 6) * 8 - 12 / (2.5 + 1.6)
```

Note that Python accepts only regular parentheses (and not square or curly brackets) to group expressions:

```{python}
((13 + 6) * 8) / (12 / (2.5 + 1.6))
```

:::{.callout-important}
Python uses a *dot* as the decimal separator and not a comma (as is common in German-speaking regions).
:::

For more advanced calculations such as square roots, logarithms, or trigonometric functions, we need to import (activate) the [`math`](https://docs.python.org/3/library/math.html) module to use the various functions it provides:

```{python}
import math
```

After that, we can compute the square root of 2 as follows:

```{python}
math.sqrt(2)
```

Mathematical constants such as Euler's number *e* (`math.e`) and $\pi$ (`math.pi`) are also available:

```{python}
1 + math.sqrt(math.e) * 7 - 2 * math.pi * 1.222
```


## Exercises

1. Install Python and start the interactive interpreter. Which Python version do you use and how can you find out?

2. What happens if you type `import antigravity` and `import this` in the Python interpreter?

3. Compute the result of the division $4 / 0.4$. In addition, compute the integer result and the remainder.

4. Assume you measured the following values: 11, 27, 15, 10, 33, 18, 25, 22, 39, and 11. Calculate the arithmetic mean in a single line of code.

5. Evaluate the following mathematical expression in a single line of code (don't forget to `import math` for the square root and $\pi$):

  $$\frac{(5^5 - \pi) \cdot \frac{19}{3}}{\sqrt{13} + 7^{\frac{2}{3}}}$$

---
![https://creativecommons.org/licenses/by-nc-sa/4.0/](cc_license.png) This document is licensed under the [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) by [Clemens Brunner](https://cbrnr.github.io/).
